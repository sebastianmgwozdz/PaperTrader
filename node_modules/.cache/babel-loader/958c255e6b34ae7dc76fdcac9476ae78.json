{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/TradeText.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { List } from \"antd\";\nimport { get } from \"../Helpers\";\nimport { withFirebase } from \"../Firebase\";\n\nfunction TradeText(props) {\n  const [text, setText] = useState(null);\n  const {\n    quantity,\n    symbol,\n    type,\n    balance,\n    price\n  } = props;\n  useEffect(() => {\n    update();\n  }, [quantity, symbol, type, price]);\n\n  async function sharesOwned(long) {\n    let shares = 0;\n    await get(\"http://localhost:8080/positions/id=\" + props.firebase.auth.currentUser.uid + \"/ticker=\" + symbol + \"/active\").then(res => {\n      for (let pos of res) {\n        if (pos[\"isLong\"] === long) {\n          shares += pos[\"remaining\"];\n        }\n      }\n    });\n    return shares;\n  }\n\n  function close(numShares) {\n    get(\"http://localhost:8080/positions/id=\" + props.firebase.auth.currentUser.uid + \"/ticker=\" + symbol + \"/active\").then(res => {\n      let closed = 0;\n      let am = 0;\n\n      for (let p of res) {\n        let shares = p[\"remaining\"];\n        let remSell = quantity - closed;\n        let sellAll = shares <= remSell;\n        am += (sellAll ? remSell : quantity) * (type === 1 ? price : p[\"price\"] * 100 - price);\n        closed += sellAll ? remSell : quantity;\n      }\n\n      setText([\"Current Shares: \" + numShares, \"Remaining Shares: \" + (numShares - quantity), \"Current Balance: $\" + balance / 100, \"New Balance: $\" + (balance + am) / 100]);\n    });\n  }\n\n  async function update() {\n    if (!symbol || quantity === 0) {\n      setText(null);\n      return;\n    }\n\n    switch (type) {\n      case 0:\n        setText([\"Current Balance: $\" + (balance / 100).toFixed(2), \"New Balance: $\" + ((balance - price * quantity) / 100).toFixed(2)]);\n        break;\n\n      case 2:\n        setText([\"Total Value: $\" + (quantity * price / 100).toFixed(2)]);\n        break;\n\n      default:\n        sharesOwned(true).then(res => {\n          close(res);\n        });\n        break;\n    }\n  }\n\n  if (!text) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(List, {\n    size: \"small\",\n    bordered: true,\n    dataSource: text,\n    renderItem: item => /*#__PURE__*/React.createElement(List.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, item),\n    style: props.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default withFirebase(TradeText);","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/TradeText.js"],"names":["React","useState","useEffect","List","get","withFirebase","TradeText","props","text","setText","quantity","symbol","type","balance","price","update","sharesOwned","long","shares","firebase","auth","currentUser","uid","then","res","pos","close","numShares","closed","am","p","remSell","sellAll","toFixed","item","style"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { List } from \"antd\";\nimport { get } from \"../Helpers\";\nimport { withFirebase } from \"../Firebase\";\n\nfunction TradeText(props) {\n  const [text, setText] = useState(null);\n\n  const { quantity, symbol, type, balance, price } = props;\n\n  useEffect(() => {\n    update();\n  }, [quantity, symbol, type, price]);\n\n  async function sharesOwned(long) {\n    let shares = 0;\n\n    await get(\n      \"http://localhost:8080/positions/id=\" +\n        props.firebase.auth.currentUser.uid +\n        \"/ticker=\" +\n        symbol +\n        \"/active\"\n    ).then((res) => {\n      for (let pos of res) {\n        if (pos[\"isLong\"] === long) {\n          shares += pos[\"remaining\"];\n        }\n      }\n    });\n\n    return shares;\n  }\n\n  function close(numShares) {\n    get(\n      \"http://localhost:8080/positions/id=\" +\n        props.firebase.auth.currentUser.uid +\n        \"/ticker=\" +\n        symbol +\n        \"/active\"\n    ).then((res) => {\n      let closed = 0;\n      let am = 0;\n      for (let p of res) {\n        let shares = p[\"remaining\"];\n        let remSell = quantity - closed;\n        let sellAll = shares <= remSell;\n\n        am +=\n          (sellAll ? remSell : quantity) *\n          (type === 1 ? price : p[\"price\"] * 100 - price);\n        closed += sellAll ? remSell : quantity;\n      }\n      setText([\n        \"Current Shares: \" + numShares,\n        \"Remaining Shares: \" + (numShares - quantity),\n        \"Current Balance: $\" + balance / 100,\n        \"New Balance: $\" + (balance + am) / 100,\n      ]);\n    });\n  }\n\n  async function update() {\n    if (!symbol || quantity === 0) {\n      setText(null);\n      return;\n    }\n\n    switch (type) {\n      case 0:\n        setText([\n          \"Current Balance: $\" + (balance / 100).toFixed(2),\n          \"New Balance: $\" + ((balance - price * quantity) / 100).toFixed(2),\n        ]);\n        break;\n\n      case 2:\n        setText([\"Total Value: $\" + ((quantity * price) / 100).toFixed(2)]);\n        break;\n      default:\n        sharesOwned(true).then((res) => {\n          close(res);\n        });\n        break;\n    }\n  }\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <List\n      size=\"small\"\n      bordered\n      dataSource={text}\n      renderItem={(item) => <List.Item>{item}</List.Item>}\n      style={props.style}\n    />\n  );\n}\n\nexport default withFirebase(TradeText);\n"]},"metadata":{},"sourceType":"module"}