{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/Autocomplete.js\";\nimport React, { useState } from \"react\";\nimport { AutoComplete, Input } from \"antd\";\nimport { get } from \"../Helpers\";\nlet stocks = new Map();\nget(\"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=bpleiinrh5r8m26im1dg\").then(res => {\n  for (let stock of res) {\n    let symbol = stock[\"displaySymbol\"];\n    let firstChar = symbol[0];\n\n    if (stocks.has(firstChar)) {\n      stocks.get(firstChar).push(symbol);\n    } else {\n      stocks.set(firstChar, []);\n    }\n  }\n});\nexport default function Autocomplete(props) {\n  const [options, setOptions] = useState([]);\n\n  function onSelect(searchText) {\n    props.setSymbol(searchText);\n  }\n\n  function onSearch(searchText) {\n    let arr = [];\n\n    if (props.search) {\n      return;\n    } else if (!searchText) {\n      setOptions([]);\n      props.setSymbol(\"\");\n      return;\n    }\n\n    let filtered = stocks.get(searchText[0].toUpperCase());\n\n    if (filtered) {\n      for (let i = 0; i < filtered.length; i++) {\n        let curr = filtered[i];\n\n        if (curr.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n          arr.push({\n            value: curr,\n            label: /*#__PURE__*/React.createElement(\"span\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 15\n              }\n            }, /*#__PURE__*/React.createElement(\"b\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 17\n              }\n            }, searchText.toUpperCase()), curr.substring(searchText.length, curr.length))\n          });\n        }\n      }\n    }\n\n    setOptions(arr);\n    props.setSymbol(arr.length === 0 ? \"\" : searchText);\n  }\n\n  return /*#__PURE__*/React.createElement(AutoComplete, {\n    options: options,\n    style: {\n      width: props.width\n    },\n    onSearch: onSearch,\n    onSelect: onSelect,\n    placeholder: props.search ? \"\" : \"Enter Stock Symbol\",\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, props.search ? /*#__PURE__*/React.createElement(Input.Search, {\n    size: \"large\",\n    placeholder: \"Enter Stock Symbol\",\n    enterButton: true,\n    onSearch: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }) : null);\n}","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/Autocomplete.js"],"names":["React","useState","AutoComplete","Input","get","stocks","Map","then","res","stock","symbol","firstChar","has","push","set","Autocomplete","props","options","setOptions","onSelect","searchText","setSymbol","onSearch","arr","search","filtered","toUpperCase","i","length","curr","toLowerCase","indexOf","value","label","substring","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { AutoComplete, Input } from \"antd\";\nimport { get } from \"../Helpers\";\n\nlet stocks = new Map();\nget(\n  \"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=bpleiinrh5r8m26im1dg\"\n).then((res) => {\n  for (let stock of res) {\n    let symbol = stock[\"displaySymbol\"];\n    let firstChar = symbol[0];\n    if (stocks.has(firstChar)) {\n      stocks.get(firstChar).push(symbol);\n    } else {\n      stocks.set(firstChar, []);\n    }\n  }\n});\n\nexport default function Autocomplete(props) {\n  const [options, setOptions] = useState([]);\n\n  function onSelect(searchText) {\n    props.setSymbol(searchText);\n  }\n\n  function onSearch(searchText) {\n    let arr = [];\n    if (props.search) {\n      return;\n    } else if (!searchText) {\n      setOptions([]);\n      props.setSymbol(\"\");\n      return;\n    }\n\n    let filtered = stocks.get(searchText[0].toUpperCase());\n\n    if (filtered) {\n      for (let i = 0; i < filtered.length; i++) {\n        let curr = filtered[i];\n\n        if (curr.toLowerCase().indexOf(searchText.toLowerCase()) === 0) {\n          arr.push({\n            value: curr,\n            label: (\n              <span>\n                <b>{searchText.toUpperCase()}</b>\n                {curr.substring(searchText.length, curr.length)}\n              </span>\n            ),\n          });\n        }\n      }\n    }\n\n    setOptions(arr);\n    props.setSymbol(arr.length === 0 ? \"\" : searchText);\n  }\n\n  return (\n    <AutoComplete\n      options={options}\n      style={{\n        width: props.width,\n      }}\n      onSearch={onSearch}\n      onSelect={onSelect}\n      placeholder={props.search ? \"\" : \"Enter Stock Symbol\"}\n      autoFocus\n    >\n      {props.search ? (\n        <Input.Search\n          size=\"large\"\n          placeholder=\"Enter Stock Symbol\"\n          enterButton\n          onSearch={onSelect}\n        />\n      ) : null}\n    </AutoComplete>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}