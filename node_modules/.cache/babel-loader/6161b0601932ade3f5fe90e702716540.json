{"ast":null,"code":"import axios from \"axios\";\n\nconst https = require(\"https\");\n\nconst agent = new https.Agent({\n  rejectUnauthorized: false\n});\nexport async function get(url) {\n  let res;\n  await axios.get(url, {\n    httpsAgent: agent\n  }).then(function (response) {\n    res = response.data;\n  }).catch(function (error) {\n    console.log(error);\n  });\n  return res;\n}\nexport function del(url) {\n  axios.delete(url, {\n    httpsAgent: agent\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nexport async function post(url, data) {\n  axios.post(url, data, {\n    httpsAgent: agent\n  }).catch(function (error) {\n    console.log(error);\n  });\n}\nexport function isOpen(date) {\n  let currDay = date.getUTCDay();\n  let currHour = date.getUTCHours();\n  let currMin = date.getUTCMinutes();\n  return !(currDay === 0 || currDay === 6 || currHour < 13 || currHour >= 20 || currHour === 13 && currMin < 30);\n}\nexport async function close(trade, incrementState) {\n  // trade = {user: ..., type: ..., price: ..., shareCount: ..., ticker: ..., positions: ... }\n  let type = trade[\"type\"];\n  let price = trade[\"price\"];\n  let shareCount = trade[\"shareCount\"];\n  let positions = trade[\"positions\"];\n  let closed = 0;\n  let am = 0;\n\n  for (let p of positions) {\n    if (type === 1 && p[\"isLong\"] || type === 3 && !p[\"isLong\"]) {\n      let shares = p[\"remaining\"];\n      let remSell = shareCount - closed;\n      let sellAll = shares <= remSell;\n      am += (sellAll ? remSell : shareCount) * (type === 1 ? price : p[\"price\"] - price);\n      closed += sellAll ? remSell : shareCount;\n      p[\"remaining\"] = sellAll ? 0 : shares - shareCount;\n      let date = new Date();\n      p[\"closeDate\"] = sellAll ? date : null;\n      await post(\"http://localhost:8080/positions/\", p);\n    }\n  }\n\n  if (incrementState) {\n    incrementState(am);\n  }\n}","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/Helpers.js"],"names":["axios","https","require","agent","Agent","rejectUnauthorized","get","url","res","httpsAgent","then","response","data","catch","error","console","log","del","delete","post","isOpen","date","currDay","getUTCDay","currHour","getUTCHours","currMin","getUTCMinutes","close","trade","incrementState","type","price","shareCount","positions","closed","am","p","shares","remSell","sellAll","Date"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst https = require(\"https\");\n\nconst agent = new https.Agent({\n  rejectUnauthorized: false,\n});\n\nexport async function get(url) {\n  let res;\n\n  await axios\n    .get(url, { httpsAgent: agent })\n    .then(function (response) {\n      res = response.data;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  return res;\n}\n\nexport function del(url) {\n  axios.delete(url, { httpsAgent: agent }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport async function post(url, data) {\n  axios.post(url, data, { httpsAgent: agent }).catch(function (error) {\n    console.log(error);\n  });\n}\n\nexport function isOpen(date) {\n  let currDay = date.getUTCDay();\n  let currHour = date.getUTCHours();\n  let currMin = date.getUTCMinutes();\n\n  return !(\n    currDay === 0 ||\n    currDay === 6 ||\n    currHour < 13 ||\n    currHour >= 20 ||\n    (currHour === 13 && currMin < 30)\n  );\n}\n\nexport async function close(trade, incrementState) {\n  // trade = {user: ..., type: ..., price: ..., shareCount: ..., ticker: ..., positions: ... }\n  let type = trade[\"type\"];\n  let price = trade[\"price\"];\n  let shareCount = trade[\"shareCount\"];\n  let positions = trade[\"positions\"];\n\n  let closed = 0;\n  let am = 0;\n  for (let p of positions) {\n    if ((type === 1 && p[\"isLong\"]) || (type === 3 && !p[\"isLong\"])) {\n      let shares = p[\"remaining\"];\n      let remSell = shareCount - closed;\n      let sellAll = shares <= remSell;\n\n      am +=\n        (sellAll ? remSell : shareCount) *\n        (type === 1 ? price : p[\"price\"] - price);\n      closed += sellAll ? remSell : shareCount;\n      p[\"remaining\"] = sellAll ? 0 : shares - shareCount;\n      let date = new Date();\n\n      p[\"closeDate\"] = sellAll ? date : null;\n\n      await post(\"http://localhost:8080/positions/\", p);\n    }\n  }\n\n  if (incrementState) {\n    incrementState(am);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}