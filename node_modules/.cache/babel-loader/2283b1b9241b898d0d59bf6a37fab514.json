{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/ClosedPositions.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Table, Tag } from \"antd\";\nimport { get } from \"../Helpers\";\nimport { withFirebase } from \"../Firebase\";\nconst columns = [{\n  title: \"Open Date\",\n  dataIndex: \"openDate\",\n  key: \"openDate\"\n}, {\n  title: \"Close Date\",\n  dataIndex: \"closeDate\",\n  key: \"closeDate\"\n}, {\n  title: \"Price\",\n  dataIndex: \"price\",\n  key: \"price\"\n}, {\n  title: \"Initial\",\n  dataIndex: \"initial\",\n  key: \"initial\"\n}, {\n  title: \"Type\",\n  key: \"type\",\n  dataIndex: \"tags\",\n  render: tags => /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, tags.map(tag => {\n    let color = tag === \"Buy\" ? \"green\" : \"red\";\n    return /*#__PURE__*/React.createElement(Tag, {\n      color: color,\n      key: tag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, tag.toUpperCase());\n  }))\n}];\n\nfunction localTime(utc) {\n  let local = utc.valueOf();\n  let offset = utc.getTimezoneOffset() * 60 * 1000;\n  console.log(utc.getTimezoneOffset());\n  local -= offset;\n  return new Date(local);\n}\n\nfunction formattedDate(date) {\n  return date.getMonth() + 1 + \"-\" + date.getDate() + \"-\" + date.getFullYear();\n}\n\nfunction ClosedPositions(props) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    get(\"http://localhost:8080/positions/id=\" + props.firebase.auth.currentUser.uid + \"/ticker=\" + props.ticker + \"/closed\").then(res => {\n      setData(res);\n    });\n  }, [props.ticker, props.firebase.auth.currentUser.uid, props.tick]);\n\n  function formattedData() {\n    return data.map((entry, index) => {\n      let openDate = localTime(new Date(entry[\"openDate\"]));\n      let closeDate = localTime(new Date(entry[\"closeDate\"]));\n      return {\n        key: index,\n        openDate: formattedDate(openDate),\n        closeDate: formattedDate(closeDate),\n        price: entry[\"price\"] / 100,\n        initial: entry[\"initial\"],\n        tags: [entry[\"isLong\"] ? \"Buy\" : \"Short\"],\n        long: entry[\"isLong\"]\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: formattedData(),\n    style: props.style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default withFirebase(ClosedPositions);","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/ClosedPositions.js"],"names":["React","useEffect","useState","Table","Tag","get","withFirebase","columns","title","dataIndex","key","render","tags","map","tag","color","toUpperCase","localTime","utc","local","valueOf","offset","getTimezoneOffset","console","log","Date","formattedDate","date","getMonth","getDate","getFullYear","ClosedPositions","props","data","setData","firebase","auth","currentUser","uid","ticker","then","res","tick","formattedData","entry","index","openDate","closeDate","price","initial","long","style"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Table, Tag } from \"antd\";\nimport { get } from \"../Helpers\";\nimport { withFirebase } from \"../Firebase\";\n\nconst columns = [\n  {\n    title: \"Open Date\",\n    dataIndex: \"openDate\",\n    key: \"openDate\",\n  },\n  {\n    title: \"Close Date\",\n    dataIndex: \"closeDate\",\n    key: \"closeDate\",\n  },\n  {\n    title: \"Price\",\n    dataIndex: \"price\",\n    key: \"price\",\n  },\n  {\n    title: \"Initial\",\n    dataIndex: \"initial\",\n    key: \"initial\",\n  },\n\n  {\n    title: \"Type\",\n    key: \"type\",\n    dataIndex: \"tags\",\n    render: (tags) => (\n      <span>\n        {tags.map((tag) => {\n          let color = tag === \"Buy\" ? \"green\" : \"red\";\n\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </span>\n    ),\n  },\n];\n\nfunction localTime(utc) {\n  let local = utc.valueOf();\n  let offset = utc.getTimezoneOffset() * 60 * 1000;\n  console.log(utc.getTimezoneOffset());\n  local -= offset;\n  return new Date(local);\n}\n\nfunction formattedDate(date) {\n  return date.getMonth() + 1 + \"-\" + date.getDate() + \"-\" + date.getFullYear();\n}\n\nfunction ClosedPositions(props) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    get(\n      \"http://localhost:8080/positions/id=\" +\n        props.firebase.auth.currentUser.uid +\n        \"/ticker=\" +\n        props.ticker +\n        \"/closed\"\n    ).then((res) => {\n      setData(res);\n    });\n  }, [props.ticker, props.firebase.auth.currentUser.uid, props.tick]);\n\n  function formattedData() {\n    return data.map((entry, index) => {\n      let openDate = localTime(new Date(entry[\"openDate\"]));\n      let closeDate = localTime(new Date(entry[\"closeDate\"]));\n\n      return {\n        key: index,\n        openDate: formattedDate(openDate),\n        closeDate: formattedDate(closeDate),\n        price: entry[\"price\"] / 100,\n        initial: entry[\"initial\"],\n        tags: [entry[\"isLong\"] ? \"Buy\" : \"Short\"],\n        long: entry[\"isLong\"],\n      };\n    });\n  }\n\n  return (\n    <Table columns={columns} dataSource={formattedData()} style={props.style} />\n  );\n}\n\nexport default withFirebase(ClosedPositions);\n"]},"metadata":{},"sourceType":"module"}