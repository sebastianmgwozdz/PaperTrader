{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/CardGrid.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { get } from \"../Helpers\";\nimport StockCard from \"./StockCard\";\nimport { withFirebase } from \"../Firebase\";\nimport { server } from \"../../links\";\nimport { message } from \"antd\";\n\nfunction CardGrid(props) {\n  const [positions, setPositions] = useState(new Map());\n  const [prices] = useState(new Map());\n\n  function update() {\n    let p = new Map();\n    let n = [];\n    get(server + \"positions/id=\" + props.firebase.auth.currentUser.uid + \"/active\").then(res => {\n      if (res) {\n        for (let pos of res) {\n          let ticker = pos[\"ticker\"];\n\n          if (p.has(ticker)) {\n            p.get(ticker).push(pos);\n          } else {\n            p.set(ticker, [pos]);\n            n.push(ticker);\n          }\n        }\n      } else {\n        message.error(\"Error connecting to server. Attempting to reconnect.\");\n      }\n\n      setPositions(p);\n    });\n    const socket = new WebSocket(\"wss://ws.finnhub.io?token=bpleiinrh5r8m26im1dg\");\n\n    let dataFunc = event => {\n      let data = JSON.parse(event.data).data;\n\n      if (data) {\n        prices.set(data[0][\"s\"], data[0]);\n      }\n    };\n\n    addConnections(socket, n);\n    socket.onmessage = dataFunc;\n  }\n\n  function addConnections(socket, n) {\n    socket.onopen = () => n.forEach(val => {\n      socket.send(JSON.stringify({\n        type: \"subscribe\",\n        symbol: val\n      }));\n    });\n  }\n\n  useEffect(() => {\n    update();\n    let t = setInterval(() => {\n      update();\n    }, 5000);\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  function getCards() {\n    let cards = [];\n    positions.forEach((val, key, map) => {\n      cards.push( /*#__PURE__*/React.createElement(StockCard, {\n        ticker: key,\n        positions: val,\n        key: key,\n        clickFunc: props.clickFunc,\n        data: prices.get(key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }));\n    });\n    return cards;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"0.35fr 0.35fr 0.35fr\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, getCards());\n}\n\nexport default withFirebase(CardGrid);","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/CardGrid.js"],"names":["React","useState","useEffect","get","StockCard","withFirebase","server","message","CardGrid","props","positions","setPositions","Map","prices","update","p","n","firebase","auth","currentUser","uid","then","res","pos","ticker","has","push","set","error","socket","WebSocket","dataFunc","event","data","JSON","parse","addConnections","onmessage","onopen","forEach","val","send","stringify","type","symbol","t","setInterval","clearInterval","getCards","cards","key","map","clickFunc","display","gridTemplateColumns"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { get } from \"../Helpers\";\nimport StockCard from \"./StockCard\";\nimport { withFirebase } from \"../Firebase\";\nimport { server } from \"../../links\";\nimport { message } from \"antd\";\n\nfunction CardGrid(props) {\n  const [positions, setPositions] = useState(new Map());\n  const [prices] = useState(new Map());\n\n  function update() {\n    let p = new Map();\n    let n = [];\n\n    get(\n      server + \"positions/id=\" + props.firebase.auth.currentUser.uid + \"/active\"\n    ).then((res) => {\n      if (res) {\n        for (let pos of res) {\n          let ticker = pos[\"ticker\"];\n          if (p.has(ticker)) {\n            p.get(ticker).push(pos);\n          } else {\n            p.set(ticker, [pos]);\n            n.push(ticker);\n          }\n        }\n      } else {\n        message.error(\"Error connecting to server. Attempting to reconnect.\");\n      }\n\n      setPositions(p);\n    });\n\n    const socket = new WebSocket(\n      \"wss://ws.finnhub.io?token=bpleiinrh5r8m26im1dg\"\n    );\n\n    let dataFunc = (event) => {\n      let data = JSON.parse(event.data).data;\n\n      if (data) {\n        prices.set(data[0][\"s\"], data[0]);\n      }\n    };\n\n    addConnections(socket, n);\n\n    socket.onmessage = dataFunc;\n  }\n\n  function addConnections(socket, n) {\n    socket.onopen = () =>\n      n.forEach((val) => {\n        socket.send(JSON.stringify({ type: \"subscribe\", symbol: val }));\n      });\n  }\n\n  useEffect(() => {\n    update();\n    let t = setInterval(() => {\n      update();\n    }, 5000);\n\n    return () => {\n      clearInterval(t);\n    };\n  }, []);\n\n  function getCards() {\n    let cards = [];\n\n    positions.forEach((val, key, map) => {\n      cards.push(\n        <StockCard\n          ticker={key}\n          positions={val}\n          key={key}\n          clickFunc={props.clickFunc}\n          data={prices.get(key)}\n        ></StockCard>\n      );\n    });\n\n    return cards;\n  }\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: \"0.35fr 0.35fr 0.35fr\",\n      }}\n    >\n      {getCards()}\n    </div>\n  );\n}\n\nexport default withFirebase(CardGrid);\n"]},"metadata":{},"sourceType":"module"}