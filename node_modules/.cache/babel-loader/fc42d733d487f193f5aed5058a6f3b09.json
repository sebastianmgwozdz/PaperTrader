{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/StockCard.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { get, isOpen } from \"../Helpers\";\nimport Graph from \"./Graph\";\nimport { Typography } from \"antd\";\nimport { withFirebase } from \"../Firebase\";\nimport CoverCard from \"./CoverCard\";\nimport Loading from \"./Loading\";\nconst {\n  Text\n} = Typography;\nconst BLACK = \"#000000\";\nconst GRAY = \"#787777\";\nconst GREEN = \"#24e361\";\nconst RED = \"#f55936\";\n\nfunction StockCard(props) {\n  const [quote, setQuote] = useState(null);\n  const {\n    ticker,\n    positions,\n    clickFunc,\n    data\n  } = props;\n\n  function updateQuote() {\n    get(\"https://finnhub.io/api/v1/quote?symbol=\" + ticker + \"&token=bpleiinrh5r8m26im1dg\").then(res => {\n      if (res) {\n        res[\"pc\"] = res[\"pc\"] * 100;\n        res[\"c\"] = res[\"c\"] * 100;\n        res[\"t\"] = Number(res[\"t\"] + \"000\");\n        setQuote(res);\n      }\n    });\n  }\n\n  useEffect(() => {\n    updateQuote();\n  }, []);\n  useEffect(() => {\n    let curr = Date.now();\n    let past = curr - 1000 * 60;\n\n    if (isOpen(new Date(curr)) && !isOpen(new Date(past))) {\n      updateQuote();\n    }\n  }, [positions]);\n\n  function isToday(date) {\n    const today = new Date();\n    const d = new Date(date);\n    return d.getUTCDate() === today.getUTCDate() && d.getUTCMonth() === today.getUTCMonth() && d.getUTCFullYear() === today.getUTCFullYear();\n  }\n\n  function currPrice() {\n    let curr;\n\n    if (data) {\n      if (data[\"t\"] > quote[\"t\"]) {\n        curr = data[\"p\"] * 100;\n      } else {\n        curr = quote[\"c\"];\n      }\n    } else {\n      curr = quote[\"c\"];\n    }\n\n    return curr;\n  }\n\n  function calcDiff(type) {\n    let diff = 0;\n\n    if (!quote) {\n      return diff;\n    }\n\n    for (let pos of positions) {\n      let d = pos[\"remaining\"];\n      let sinceClose = nextOpen(new Date(pos[\"openDate\"])) > Date.now();\n      console.log(new Date().getTime());\n      console.log(nextOpen(new Date(pos[\"openDate\"])).getTime() + \" \" + Date.now());\n      let sinceOpen = isToday(pos[\"openDate\"]) && isOpen(new Date(pos[\"openDate\"]));\n      let currPr = currPrice();\n\n      if (sinceClose) {\n        d = 0;\n      } else if (type === \"net\" || sinceOpen) {\n        d *= currPr - pos[\"price\"];\n      } else {\n        d *= currPr - quote[\"pc\"];\n      }\n\n      if (pos[\"isLong\"]) {\n        diff += d;\n      } else {\n        diff -= d;\n      }\n    }\n\n    return diff;\n  }\n\n  function nextOpen(date) {\n    if (date.getUTCHours() > 19) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n\n    if (date.getUTCDay() === 6) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n\n    if (date.getUTCDay() === 0) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n\n    date.setUTCHours(13);\n    date.setUTCMinutes(30);\n    date.setUTCSeconds(0);\n    return date;\n  }\n\n  function percentDiff(old, updated) {\n    if (isNaN(updated) || isNaN(old)) {\n      return 0;\n    }\n\n    return (updated - old) / old * 100;\n  }\n\n  function initialInvestment() {\n    let val = 0;\n\n    for (let pos of positions) {\n      val += pos[\"initial\"] * pos[\"price\"];\n    }\n\n    return val;\n  }\n\n  function color(val) {\n    if (Math.abs(val) < 0.005) {\n      return GRAY;\n    } else if (val > 0) {\n      return GREEN;\n    } else {\n      return RED;\n    }\n  }\n\n  function text(dayChange, netChange) {\n    if (!quote) {\n      return null;\n    }\n\n    let initial = initialInvestment();\n    let dayPercent = Math.abs(dayChange) < 0.005 ? 0 : percentDiff(initial, dayChange + initial);\n    let netPercent = Math.abs(netChange) < 0.005 ? 0 : percentDiff(initial, netChange + initial);\n    let dayColor = color(dayChange);\n    let netColor = color(netChange);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: BLACK,\n        fontSize: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }, ticker), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: BLACK\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    }, \"Day Change: \"), /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: dayColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"$\", (dayChange / 100).toFixed(2), \" (\", dayPercent.toFixed(2), \"%)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: BLACK\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, \"Net Change: \"), /*#__PURE__*/React.createElement(Text, {\n      style: {\n        color: netColor\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, \"$\", (netChange / 100).toFixed(2), \" (\", netPercent.toFixed(2), \"%)\"));\n  }\n\n  let dayChange = calcDiff(\"day\");\n  let netChange = calcDiff(\"net\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"3vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CoverCard, {\n    cover: quote ? /*#__PURE__*/React.createElement(Graph, {\n      dataPoint: dayChange,\n      positions: positions,\n      reference: 0,\n      hide: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }),\n    onClick: () => {\n      clickFunc(ticker);\n    },\n    metaList: text(dayChange, netChange),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default withFirebase(StockCard);","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/StockCard.js"],"names":["React","useEffect","useState","get","isOpen","Graph","Typography","withFirebase","CoverCard","Loading","Text","BLACK","GRAY","GREEN","RED","StockCard","props","quote","setQuote","ticker","positions","clickFunc","data","updateQuote","then","res","Number","curr","Date","now","past","isToday","date","today","d","getUTCDate","getUTCMonth","getUTCFullYear","currPrice","calcDiff","type","diff","pos","sinceClose","nextOpen","console","log","getTime","sinceOpen","currPr","getUTCHours","setUTCDate","getUTCDay","setUTCHours","setUTCMinutes","setUTCSeconds","percentDiff","old","updated","isNaN","initialInvestment","val","color","Math","abs","text","dayChange","netChange","initial","dayPercent","netPercent","dayColor","netColor","fontSize","toFixed","margin"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { get, isOpen } from \"../Helpers\";\nimport Graph from \"./Graph\";\nimport { Typography } from \"antd\";\nimport { withFirebase } from \"../Firebase\";\nimport CoverCard from \"./CoverCard\";\nimport Loading from \"./Loading\";\n\nconst { Text } = Typography;\nconst BLACK = \"#000000\";\nconst GRAY = \"#787777\";\nconst GREEN = \"#24e361\";\nconst RED = \"#f55936\";\n\nfunction StockCard(props) {\n  const [quote, setQuote] = useState(null);\n  const { ticker, positions, clickFunc, data } = props;\n\n  function updateQuote() {\n    get(\n      \"https://finnhub.io/api/v1/quote?symbol=\" +\n        ticker +\n        \"&token=bpleiinrh5r8m26im1dg\"\n    ).then((res) => {\n      if (res) {\n        res[\"pc\"] = res[\"pc\"] * 100;\n        res[\"c\"] = res[\"c\"] * 100;\n        res[\"t\"] = Number(res[\"t\"] + \"000\");\n        setQuote(res);\n      }\n    });\n  }\n\n  useEffect(() => {\n    updateQuote();\n  }, []);\n\n  useEffect(() => {\n    let curr = Date.now();\n    let past = curr - 1000 * 60;\n\n    if (isOpen(new Date(curr)) && !isOpen(new Date(past))) {\n      updateQuote();\n    }\n  }, [positions]);\n\n  function isToday(date) {\n    const today = new Date();\n    const d = new Date(date);\n\n    return (\n      d.getUTCDate() === today.getUTCDate() &&\n      d.getUTCMonth() === today.getUTCMonth() &&\n      d.getUTCFullYear() === today.getUTCFullYear()\n    );\n  }\n\n  function currPrice() {\n    let curr;\n\n    if (data) {\n      if (data[\"t\"] > quote[\"t\"]) {\n        curr = data[\"p\"] * 100;\n      } else {\n        curr = quote[\"c\"];\n      }\n    } else {\n      curr = quote[\"c\"];\n    }\n\n    return curr;\n  }\n\n  function calcDiff(type) {\n    let diff = 0;\n\n    if (!quote) {\n      return diff;\n    }\n\n    for (let pos of positions) {\n      let d = pos[\"remaining\"];\n      let sinceClose = nextOpen(new Date(pos[\"openDate\"])) > Date.now();\n\n      console.log(new Date().getTime());\n\n      console.log(\n        nextOpen(new Date(pos[\"openDate\"])).getTime() + \" \" + Date.now()\n      );\n\n      let sinceOpen =\n        isToday(pos[\"openDate\"]) && isOpen(new Date(pos[\"openDate\"]));\n      let currPr = currPrice();\n\n      if (sinceClose) {\n        d = 0;\n      } else if (type === \"net\" || sinceOpen) {\n        d *= currPr - pos[\"price\"];\n      } else {\n        d *= currPr - quote[\"pc\"];\n      }\n\n      if (pos[\"isLong\"]) {\n        diff += d;\n      } else {\n        diff -= d;\n      }\n    }\n\n    return diff;\n  }\n\n  function nextOpen(date) {\n    if (date.getUTCHours() > 19) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n    if (date.getUTCDay() === 6) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n    if (date.getUTCDay() === 0) {\n      date.setUTCDate(date.getUTCDate() + 1);\n    }\n    date.setUTCHours(13);\n    date.setUTCMinutes(30);\n\n    date.setUTCSeconds(0);\n    return date;\n  }\n\n  function percentDiff(old, updated) {\n    if (isNaN(updated) || isNaN(old)) {\n      return 0;\n    }\n    return ((updated - old) / old) * 100;\n  }\n\n  function initialInvestment() {\n    let val = 0;\n\n    for (let pos of positions) {\n      val += pos[\"initial\"] * pos[\"price\"];\n    }\n\n    return val;\n  }\n\n  function color(val) {\n    if (Math.abs(val) < 0.005) {\n      return GRAY;\n    } else if (val > 0) {\n      return GREEN;\n    } else {\n      return RED;\n    }\n  }\n\n  function text(dayChange, netChange) {\n    if (!quote) {\n      return null;\n    }\n\n    let initial = initialInvestment();\n\n    let dayPercent =\n      Math.abs(dayChange) < 0.005\n        ? 0\n        : percentDiff(initial, dayChange + initial);\n\n    let netPercent =\n      Math.abs(netChange) < 0.005\n        ? 0\n        : percentDiff(initial, netChange + initial);\n\n    let dayColor = color(dayChange);\n    let netColor = color(netChange);\n\n    return (\n      <div>\n        <Text style={{ color: BLACK, fontSize: \"20px\" }}>{ticker}</Text>\n        <br />\n\n        <Text style={{ color: BLACK }}>Day Change: </Text>\n        <Text\n          style={{\n            color: dayColor,\n          }}\n        >\n          ${(dayChange / 100).toFixed(2)} ({dayPercent.toFixed(2)}%)\n        </Text>\n        <br />\n        <Text style={{ color: BLACK }}>Net Change: </Text>\n        <Text\n          style={{\n            color: netColor,\n          }}\n        >\n          ${(netChange / 100).toFixed(2)} ({netPercent.toFixed(2)}%)\n        </Text>\n      </div>\n    );\n  }\n\n  let dayChange = calcDiff(\"day\");\n  let netChange = calcDiff(\"net\");\n\n  return (\n    <div style={{ margin: \"3vh\" }}>\n      <CoverCard\n        cover={\n          quote ? (\n            <Graph\n              dataPoint={dayChange}\n              positions={positions}\n              reference={0}\n              hide\n            ></Graph>\n          ) : (\n            <Loading></Loading>\n          )\n        }\n        onClick={() => {\n          clickFunc(ticker);\n        }}\n        metaList={text(dayChange, netChange)}\n      ></CoverCard>\n    </div>\n  );\n}\n\nexport default withFirebase(StockCard);\n"]},"metadata":{},"sourceType":"module"}