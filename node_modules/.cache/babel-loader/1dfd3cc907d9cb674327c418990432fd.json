{"ast":null,"code":"var _jsxFileName = \"/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/Graph.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { YAxis, ReferenceLine, Area, AreaChart } from \"recharts\";\nimport { isOpen } from \"../Helpers\";\nconst GRAY = \"#787777\";\nconst GREEN = \"#24e361\";\nconst RED = \"#f55936\";\nexport default function Graph(props) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    if (!isNaN(props.dataPoint) && isOpen(new Date())) {\n      data.push({\n        val: props.dataPoint\n      });\n    } else if (props.data) {\n      setData(props.data);\n    }\n  }, [props.data, props.dataPoint, props.positions]);\n\n  function minMax() {\n    let arr = data.map(dp => {\n      return dp.val;\n    });\n    let incl = [...arr, props.reference];\n    let min = Math.min.apply(Math, props.reference ? incl : arr);\n    let max = Math.max.apply(Math, props.reference ? incl : arr);\n    let diff = Math.abs(max - min);\n    return [min - diff / 4, max + diff / 4];\n  }\n\n  function ticks(domain) {\n    let t = [];\n    let diff = domain[1] - domain[0];\n    let gap = Math.round(diff / 3);\n\n    for (let i = Math.floor(domain[0]); i <= Math.ceil(domain[1]); i += gap) {\n      t.push(Math.round(i));\n    }\n\n    return t;\n  }\n\n  if (data.length <= 1) {\n    return null;\n  }\n\n  let color;\n  let diff = data[data.length - 1][\"val\"] - props.reference;\n\n  if (Math.abs(diff) < 0.005) {\n    color = GRAY;\n  } else {\n    color = diff > 0 ? GREEN : RED;\n  }\n\n  let domain = minMax();\n  return /*#__PURE__*/React.createElement(AreaChart, {\n    width: props.width ? props.width : 350,\n    height: props.height ? props.height : 155,\n    data: data,\n    margin: {\n      top: 15,\n      left: 25,\n      right: 25,\n      bottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"color\" + props.ticker,\n    x1: \"0\",\n    y1: \"0\",\n    x2: \"0\",\n    y2: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"5%\",\n    stopColor: color,\n    stopOpacity: 0.4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: \"95%\",\n    stopColor: color,\n    stopOpacity: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(YAxis, {\n    type: \"number\",\n    domain: [domain[0] - 1, domain[1] + 1],\n    ticks: ticks(domain),\n    hide: props.hide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), props.reference ? /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: props.reference,\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }) : null, /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"val\",\n    stroke: color,\n    dot: false,\n    isAnimationActive: false,\n    strokeWidth: props.strokeWidth,\n    fillOpacity: 1,\n    fill: \"url(#color\" + props.ticker + \")\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sebastiangwozdz/Desktop/papertrader/src/PositionsComponents/Graph.js"],"names":["React","useState","useEffect","YAxis","ReferenceLine","Area","AreaChart","isOpen","GRAY","GREEN","RED","Graph","props","data","setData","isNaN","dataPoint","Date","push","val","positions","minMax","arr","map","dp","incl","reference","min","Math","apply","max","diff","abs","ticks","domain","t","gap","round","i","floor","ceil","length","color","width","height","top","left","right","bottom","ticker","hide","strokeWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { YAxis, ReferenceLine, Area, AreaChart } from \"recharts\";\nimport { isOpen } from \"../Helpers\";\n\nconst GRAY = \"#787777\";\nconst GREEN = \"#24e361\";\nconst RED = \"#f55936\";\n\nexport default function Graph(props) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!isNaN(props.dataPoint) && isOpen(new Date())) {\n      data.push({\n        val: props.dataPoint,\n      });\n    } else if (props.data) {\n      setData(props.data);\n    }\n  }, [props.data, props.dataPoint, props.positions]);\n\n  function minMax() {\n    let arr = data.map((dp) => {\n      return dp.val;\n    });\n    let incl = [...arr, props.reference];\n    let min = Math.min.apply(Math, props.reference ? incl : arr);\n    let max = Math.max.apply(Math, props.reference ? incl : arr);\n\n    let diff = Math.abs(max - min);\n\n    return [min - diff / 4, max + diff / 4];\n  }\n\n  function ticks(domain) {\n    let t = [];\n    let diff = domain[1] - domain[0];\n    let gap = Math.round(diff / 3);\n\n    for (let i = Math.floor(domain[0]); i <= Math.ceil(domain[1]); i += gap) {\n      t.push(Math.round(i));\n    }\n    return t;\n  }\n\n  if (data.length <= 1) {\n    return null;\n  }\n\n  let color;\n  let diff = data[data.length - 1][\"val\"] - props.reference;\n\n  if (Math.abs(diff) < 0.005) {\n    color = GRAY;\n  } else {\n    color = diff > 0 ? GREEN : RED;\n  }\n\n  let domain = minMax();\n\n  return (\n    <AreaChart\n      width={props.width ? props.width : 350}\n      height={props.height ? props.height : 155}\n      data={data}\n      margin={{ top: 15, left: 25, right: 25, bottom: 10 }}\n    >\n      <defs>\n        <linearGradient id={\"color\" + props.ticker} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n          <stop offset=\"5%\" stopColor={color} stopOpacity={0.4} />\n          <stop offset=\"95%\" stopColor={color} stopOpacity={0} />\n        </linearGradient>\n      </defs>\n      <YAxis\n        type=\"number\"\n        domain={[domain[0] - 1, domain[1] + 1]}\n        ticks={ticks(domain)}\n        hide={props.hide}\n      ></YAxis>\n\n      {props.reference ? (\n        <ReferenceLine y={props.reference} strokeDasharray=\"3 3\" />\n      ) : null}\n\n      <Area\n        type=\"monotone\"\n        dataKey=\"val\"\n        stroke={color}\n        dot={false}\n        isAnimationActive={false}\n        strokeWidth={props.strokeWidth}\n        fillOpacity={1}\n        fill={\"url(#color\" + props.ticker + \")\"}\n      />\n    </AreaChart>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}